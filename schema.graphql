type KlerosStat @entity {
  id: ID!
  courtCount: BigInt!
  disputeCount: BigInt!
  activeDisputeCount: BigInt!
  uniqueJurorCount: BigInt!
  uniqueArbitrableCount: BigInt!
  phase: Phase
}

type Court @entity {
  id: ID!

  subcourtID: BigInt!
  parent: Court

  hiddenVotes: Boolean!
  minStake: BigInt!
  alpha: BigInt!
  feeForJuror: BigInt!
  jurorsForCourtJump: BigInt!
  timesPerPeriod: [BigInt!]!
  children: [Court!]!

  disputeCount: BigInt!
}

type Dispute @entity {
  id: ID!
  disputeID: BigInt!
  arbitrable: Arbitrable! # address

  subcourt: Court!
  numberOfChoices: BigInt!
  period: Period!
  lastPeriodChange: BigInt!
  drawsInRound: BigInt!
  commitsInRound: BigInt!
  ruled: Boolean!

  latestRound: BigInt!
  rounds: [DisputeRound!] ! @derivedFrom(field: "dispute")
}

type Juror @entity {
  id: ID!
  subCourts: [Court!]!
  stakedToken: BigInt!
  # lockedToken: BigInt!
  jurorStakes: [JurorStake!] ! @derivedFrom(field: "juror")
}

type JurorStake @entity {
  id: ID!
  juror: Juror!
  subcourt: Court!
  stakedToken: BigInt!
}

type Policy @entity {
  id: ID!
  subcourtID: BigInt!
  policy: String!
}

type Arbitrable @entity {
  id: ID!
  disputeCount: BigInt!
}

type DisputeRound @entity {
  id: ID!
  dispute: Dispute!
  round: BigInt!
  voteCount: BigInt!

  winningChoice: BigInt
  tied: Boolean!
  castedVoteCounts: [BigInt!]!

  votes: [Vote!] ! @derivedFrom(field: "disputeRound")
}

type Vote @entity {
  id: ID!
  disputeRound: DisputeRound!
  juror: Juror!
  voted: Boolean!
  commit: Bytes
  choice: BigInt
}

enum Period {
  Evidence,
  Commit,
  Vote,
  Appeal,
  Execution
}

enum Phase {
  Staking,
  Generating,
  Drawing
}